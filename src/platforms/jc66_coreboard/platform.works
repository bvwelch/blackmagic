/*
 * This file is part of the Black Magic Debug project.
 *
 * Copyright (C) 2011  Black Sphere Technologies Ltd.
 * Written by Gareth McMullin <gareth@blacksphere.co.nz>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* This file implements the platform specific functions for the STM32
 * implementation.
 */
#ifndef __PLATFORM_H
#define __PLATFORM_H

#include "gdb_packet.h"
#include "gpio.h"
#include "timing.h"

#include <libopencm3/cm3/common.h>
#include <libopencm3/stm32/f1/memorymap.h>
#include <libopencm3/usb/usbd.h>

#include <setjmp.h>

#if  0
#define BOARD_IDENT       "Black Magic Probe (jc66_coreboard), (Firmware " FIRMWARE_VERSION ")"
#endif
#define BOARD_IDENT_DFU   "BOARD_IDENT_DFU_jc66_coreboard"
#define BOARD_IDENT_UPD   "BOARD_IDENT_UDP jc66_coreboard"
#define DFU_IDENT         "DFU (jc66_coreboard)"
#define DFU_IFACE_STRING  "@Internal Flash   /0x08000000/8*001Ka,56*001Kg"
#define UPD_IFACE_STRING  "@Internal Flash   /0x08000000/8*001Kg"

/* Hardware definitions... */
/* SWD pins */
#define JTAG_PORT          GPIOA
#define SWDIO_PORT 	   JTAG_PORT
#define SWDIO_PIN	     GPIO4     /* PA4 SS1 */
#define SWCLK_PORT 	   JTAG_PORT
#define SWCLK_PIN	     GPIO5     /* PA5 SCK1 */
#define SRST_PORT	   JTAG_PORT
#define SRST_PIN	     GPIO1    /* PA0 */

/* 4 wire pins */
#define TCK_PORT           JTAG_PORT
#define TCK_PIN              SWCLK_PIN /* PA5 SCK1 */
#define TMS_PORT           JTAG_PORT
#define TMS_PIN              SWDIO_PIN /* PA4 SS1 */

#define TDI_PORT           JTAG_PORT
#define TDI_PIN              GPIO6    /* PA8 MISO1 */

#define TDO_PORT           JTAG_PORT
#define TDO_PIN              GPIO7    /* PA7 MISO1 */

#define LED_PORT	   GPIOC
#define LED_IDLE_RUN         GPIO13

#define LED_PORT_UART      GPIOC
#define LED_UART	     GPIO14

#define USB_DP_PORT        GPIOA
#define USB_DP_PIN           GPIO12

#define USBUSART_PORT      GPIOA
#define USBUSART_TX_PIN      GPIO2  /* TX2 */
#if 0 /* documentation only */
#define USBUSART_RX_PIN      GPIO3  /* RX2 */
#endif

#define TARGET_VCC_PORT    GPIOA    /* PA0 */
#define TARGET_VCC_PIN       GPIO0

#if 0
GPIO_CNF_INPUT_PULL_UPDOWN
GPIO_CNF_INPUT_FLOAT
#endif

#define TMS_SET_MODE() \
    gpio_set_mode(TMS_PORT, GPIO_MODE_OUTPUT_50_MHZ, \
                  GPIO_CNF_OUTPUT_PUSHPULL, TMS_PIN);

#define SWDIO_MODE_FLOAT() \
    do { \
	gpio_set_mode(SWDIO_PORT, GPIO_MODE_INPUT, \
			GPIO_CNF_INPUT_FLOAT, SWDIO_PIN); \
    } while(0);


#define SWDIO_MODE_DRIVE() \
	gpio_set_mode(SWDIO_PORT, GPIO_MODE_OUTPUT_50_MHZ, \
	              GPIO_CNF_OUTPUT_PUSHPULL, SWDIO_PIN);

#define UART_PIN_SETUP() \
	gpio_set_mode(USBUSART_PORT, GPIO_MODE_OUTPUT_2_MHZ, \
	              GPIO_CNF_OUTPUT_ALTFN_PUSHPULL, USBUSART_TX_PIN);

#define SRST_SET_VAL(x) \
	platform_srst_set_val(x)

#define USB_DRIVER      stm32f103_usb_driver
#define USB_IRQ	        NVIC_USB_LP_CAN_RX0_IRQ
#define USB_ISR	        usb_lp_can_rx0_isr

/* Interrupt priorities.  Low numbers are high priority.
 * For now USART2 preempts USB which may spin while buffer is drained.
 * TIM3 is used for traceswo capture and must be highest priority.
 */
#define IRQ_PRI_USB		(2 << 4)
#define IRQ_PRI_USBUSART	(1 << 4)
#define IRQ_PRI_USBUSART_TIM	(3 << 4)
#define IRQ_PRI_USB_VBUS	(14 << 4)
#define IRQ_PRI_TIM3		(0 << 4)

#define USBUSART USART2
#define USBUSART_CR1 USART2_CR1
#define USBUSART_IRQ NVIC_USART2_IRQ
#define USBUSART_CLK RCC_USART2
#define USBUSART_ISR usart2_isr
#define USBUSART_TIM TIM4
#define USBUSART_TIM_CLK_EN() rcc_periph_clock_enable(RCC_TIM4)
#define USBUSART_TIM_IRQ NVIC_TIM4_IRQ
#define USBUSART_TIM_ISR tim4_isr

#define DEBUG(...)

extern jmp_buf fatal_error_jmpbuf;

#define SET_RUN_STATE(state)	{running_status = (!state);}
#define SET_IDLE_STATE(state)	{gpio_set_val(LED_PORT, LED_IDLE_RUN, !state);}
#define SET_ERROR_STATE(x)

#define PLATFORM_SET_FATAL_ERROR_RECOVERY()	{setjmp(fatal_error_jmpbuf);}
#define PLATFORM_FATAL_ERROR(error)	do { 		\
	if(running_status) gdb_putpacketz("X1D");	\
		else gdb_putpacketz("EFF");		\
	running_status = 0;				\
	target_list_free();				\
	longjmp(fatal_error_jmpbuf, (error));		\
} while (0)

/* Use newlib provided integer only stdio functions */
#define sscanf siscanf
#define sprintf siprintf
#define vasprintf vasiprintf

#endif

